import os
import time
import logging
from datetime import datetime, timedelta, time as dt_time
from email.message import EmailMessage
from dotenv import load_dotenv
import numpy as np
import pandas as pd
import oandapyV20
import oandapyV20.endpoints.instruments as instruments
import oandapyV20.endpoints.orders as orders
import oandapyV20.endpoints.trades as trades
import oandapyV20.endpoints.pricing as pricing
from oandapyV20.endpoints import accounts
import requests
import pytz
import logging


# Configuration des logs
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),  # Affiche les logs dans la console
        logging.FileHandler("trading.log")  # Enregistre les logs dans un fichier
    ]
)
logger = logging.getLogger()

# Param√®tres globaux
OANDA_API_KEY = os.getenv("OANDA_API_KEY")
OANDA_ACCOUNT_ID = os.getenv("OANDA_ACCOUNT_ID")
SIMULATION_MODE = True  # Passer √† False pour le trading r√©el
ASIAN_SESSION_START = time(0, 0)  # 00h00 UTC
ASIAN_SESSION_END = time(6, 0)    # 06h00 UTC
LONDON_SESSION_START = time(7, 0) # 07h00 UTC
NY_SESSION_END = time(16, 30)     # 16h30 UTC
PAIRS = ["EUR_USD", "GBP_USD", "USD_JPY", "XAU_USD"]
RSI_PERIOD = 14
VOLUME_MA_PERIOD = 20
MAX_RISK_USD = 100
RISK_PERCENTAGE = 1  # Risque en % du solde du compte
EMAIL_ADDRESS = os.getenv("EMAIL_ADDRESS")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")

# Initialisation des variables globales
asian_ranges = {}
daily_zones = {}
active_trades = set()
end_of_day_processed = False

# Sp√©cifications des instruments
INSTRUMENT_SPECS = {
    "EUR_USD": {"pip": 0.0001, "min_units": 1000, "precision": 0, "margin_rate": 0.02},
    "GBP_USD": {"pip": 0.0001, "min_units": 1000, "precision": 0, "margin_rate": 0.02},
    "USD_JPY": {"pip": 0.01, "min_units": 1000, "precision": 0, "margin_rate": 0.02},
    "XAU_USD": {"pip": 0.01, "min_units": 1, "precision": 2, "margin_rate": 0.02},
}

# Connexion √† l'API OANDA
client = oandapyV20.API(access_token=OANDA_API_KEY, environment="practice")

def get_candles(pair, start_time, end_time=None):
    """R√©cup√®re les bougies pour une plage horaire sp√©cifique."""
    now = datetime.utcnow()
    end_date = datetime.combine(now.date(), end_time) if end_time else now
    start_date = datetime.combine(now.date(), start_time)
    params = {
        "granularity": "M15",
        "from": start_date.isoformat() + "Z",
        "to": end_date.isoformat() + "Z",
        "price": "M"
    }
    try:
        r = instruments.InstrumentsCandles(instrument=pair, params=params)
        candles = client.request(r)['candles']
        return candles
    except Exception as e:
        logger.error(f"‚ùå Erreur r√©cup√©ration candles {pair}: {str(e)}")
        return []

def check_high_impact_events():
    """V√©rifie les √©v√©nements macro √† haut impact."""
    logger.info("üîç V√©rification des √©v√©nements macro...")
    # Impl√©mentez ici l'appel √† une API √©conomique ou calendrier √©conomique.
    return False

def analyze_pair(pair):
    """Analyse une paire pour d√©tecter des opportunit√©s de trading."""
    if check_high_impact_events():
        logger.warning("‚ö†Ô∏è √âv√©nement macro majeur - Pause de 5 min")
        return
    
    # R√©cup√©ration du range asiatique
    asian_range = asian_ranges.get(pair)
    if not asian_range:
        logger.warning(f"‚ö†Ô∏è Aucun range asiatique disponible pour {pair}")
        return
    
    # R√©cup√©ration du prix actuel
    current_price = get_current_price(pair)
    
    # V√©rification si le prix est dans la plage valide
    if not is_price_in_valid_range(current_price, asian_range):
        logger.info(f"‚ùå Prix hors range valide pour {pair}")
        return
    
    # Calcul des indicateurs techniques
    rsi = calculate_rsi(pair)
    macd_signal = calculate_macd(pair)
    
    # Logs d√©taill√©s
    logger.info(f"üìä Analyse {pair} - Prix: {current_price:.5f}, Range: {asian_range['low']:.5f} - {asian_range['high']:.5f}")
    logger.info(f"üìà RSI: {rsi:.2f}, MACD Signal: {macd_signal}")
    
    # D√©cision de placement de trade
    if rsi < 30 and macd_signal == "BUY":
        place_trade(pair, "buy", current_price, asian_range["low"], asian_range["high"])
    elif rsi > 70 and macd_signal == "SELL":
        place_trade(pair, "sell", current_price, asian_range["high"], asian_range["low"])

def main_loop():
    """Boucle principale du bot."""
    while True:
        now = datetime.utcnow()
        current_time = now.time()
        
        logger.info(f"‚è≥ Heure actuelle: {current_time}")
        
        # V√©rification des trades actifs
        active_trades = check_active_trades()
        logger.info(f"üìä Trades actifs: {len(active_trades)}")
        
        # Limite globale de 1 trade maximum
        if len(active_trades) >= 1:
            logger.info("‚ö†Ô∏è Limite de 1 trade atteinte - Attente...")
            time.sleep(60)
            continue
        
        # Session asiatique
        if ASIAN_SESSION_START <= current_time < ASIAN_SESSION_END:
            logger.info("üåè SESSION ASIATIQUE EN COURS")
            analyze_asian_session()
        else:
            logger.info("üåç Hors session asiatique")
        
        # Session Londres/NY
        if LONDON_SESSION_START <= current_time <= NY_SESSION_END:
            logger.info("üèôÔ∏è SESSION LONDRES/NY EN COURS")
            for pair in PAIRS:
                if pair not in active_trades:
                    analyze_pair(pair)
        else:
            logger.info("üåÜ Hors session Londres/NY")
        
        # V√©rification des stops et take-profits
        check_tp_sl()
        
        logger.info("‚è∞ Pause avant le prochain cycle...")
        time.sleep(60)

def check_active_trades():
    """Retourne une liste des paires avec des trades actifs."""
    try:
        r = trades.OpenTrades(accountID=OANDA_ACCOUNT_ID)
        open_trades = client.request(r).get('trades', [])
        active_pairs = [trade['instrument'] for trade in open_trades]
        return active_pairs
    except Exception as e:
        logger.error(f"‚ùå Erreur r√©cup√©ration trades actifs: {str(e)}")
        return []

def place_trade(pair, direction, entry_price, stop_loss, take_profit):
    """Place un trade avec trailing SL/TP."""
    global SIMULATION_MODE
    account_balance = get_account_balance()
    units = calculate_position_size(pair, account_balance, entry_price, stop_loss)
    
    if units <= 0:
        logger.warning(f"‚ö†Ô∏è Impossible de placer le trade {pair} - Taille de position invalide")
        return
    
    logger.info(f"""
    üöÄ NOUVEAU TRADE {'ACHAT' if direction == 'buy' else 'VENTE'} üöÄ
    ‚Ä¢ Paire: {pair}
    ‚Ä¢ Direction: {direction.upper()}
    ‚Ä¢ Entr√©e: {entry_price:.5f}
    ‚Ä¢ Stop: {stop_loss:.5f}
    ‚Ä¢ TP: {take_profit:.5f}
    ‚Ä¢ Unit√©s: {units}
    ‚Ä¢ Risque: ${min(account_balance * (RISK_PERCENTAGE / 100), MAX_RISK_USD):.2f}
    """)
    
    if SIMULATION_MODE:
        logger.info("üß™ Mode simulation - Trade non envoy√©")
        return "SIMULATION"
    
    try:
        order_data = {
            "order": {
                "instrument": pair,
                "units": str(units) if direction == "buy" else str(-units),
                "type": "MARKET",
                "positionFill": "DEFAULT",
                "stopLossOnFill": {"price": f"{stop_loss:.5f}", "timeInForce": "GTC"},
                "takeProfitOnFill": {"price": f"{take_profit:.5f}", "timeInForce": "GTC"}
            }
        }
        r = orders.OrderCreate(accountID=OANDA_ACCOUNT_ID, data=order_data)
        response = client.request(r)
        if "orderFillTransaction" in response:
            trade_id = response["orderFillTransaction"]["id"]
            logger.info(f"‚úÖ Trade ex√©cut√©! ID: {trade_id}")
            active_trades.add(pair)
            return trade_id
    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation ordre: {str(e)}")
        return None

def get_current_price(pair):
    """R√©cup√®re le prix actuel d'une paire."""
    params = {"instruments": pair}
    r = pricing.PricingInfo(accountID=OANDA_ACCOUNT_ID, params=params)
    response = client.request(r)
    return float(response['prices'][0]['bids'][0]['price'])

def calculate_rsi(pair, period=14):
    candles = get_candles(pair, LONDON_SESSION_START, NY_SESSION_END)
    closes = [float(c['mid']['c']) for c in candles]
    if len(closes) < period + 1:
        logger.warning(f"‚ö†Ô∏è Donn√©es insuffisantes pour RSI ({len(closes)} points)")
        return None
    deltas = np.diff(closes)
    gains = np.where(deltas > 0, deltas, 0)
    losses = np.where(deltas < 0, -deltas, 0)
    avg_gain = np.mean(gains[:period])
    avg_loss = np.mean(losses[:period])
    rs = avg_gain / avg_loss if avg_loss != 0 else 0
    return 100 - (100 / (1 + rs))

def fetch_historical_asian_range(pair):
    """R√©cup√®re le range asiatique historique pour une paire."""
    candles = get_candles(pair, ASIAN_SESSION_START, ASIAN_SESSION_END)
    highs = [float(c['mid']['h']) for c in candles if 'mid' in c]
    lows = [float(c['mid']['l']) for c in candles if 'mid' in c]
    if not highs or not lows:
        logger.warning(f"‚ö†Ô∏è Donn√©es insuffisantes pour {pair}")
        return None
    return {"high": max(highs), "low": min(lows)}

def analyze_asian_session():
    """Analyse robuste avec gestion des donn√©es partielles et r√©essais intelligents."""
    global asian_ranges
    pairs = ["EUR_USD", "GBP_USD", "USD_JPY", "XAU_USD"]
    success_count = 0
    max_retries = 3
    
    for attempt in range(1, max_retries + 1):
        logger.info(f"üîÅ Tentative {attempt}/{max_retries}")
        for pair in pairs:
            if pair in asian_ranges:
                continue
            try:
                historical_range = fetch_historical_asian_range(pair)
                if historical_range:
                    asian_ranges[pair] = historical_range
                    success_count += 1
                    logger.info(f"‚úÖ Range asiatique calcul√© pour {pair}: {historical_range}")
            except Exception as e:
                logger.error(f"‚ùå Erreur analyse asiatique {pair} (tentative {attempt}): {str(e)}")
        if success_count == len(pairs):
            logger.info("üåç ANALYSE ASIATIQUE TERMIN√âE AVEC SUCC√àS")
            break
        time.sleep(60)
    else:
        logger.warning("‚ö†Ô∏è √âchec complet de l'analyse asiatique apr√®s plusieurs tentatives")

def get_account_balance():
    """R√©cup√®re le solde du compte."""
    try:
        r = accounts.AccountDetails(accountID=OANDA_ACCOUNT_ID)
        response = client.request(r)
        balance = float(response['account']['balance'])
        logger.info(f"üíº Solde du compte r√©cup√©r√©: ${balance:.2f}")
        return balance
    except Exception as e:
        logger.error(f"‚ùå Erreur r√©cup√©ration solde du compte: {str(e)}")
        return 0

def calculate_position_size(pair, balance, entry_price, stop_loss):
    """Calcule la taille de position en fonction du risque."""
    specs = get_instrument_details(pair)
    distance_pips = abs(entry_price - stop_loss) / specs["pip"]
    risk_per_trade = min(balance * (RISK_PERCENTAGE / 100), MAX_RISK_USD)
    units = risk_per_trade / distance_pips
    units = max(units, specs["min_units"])
    return round(units, specs["precision"])

def get_instrument_details(pair):
    """Retourne les sp√©cifications de l'instrument."""
    specs = INSTRUMENT_SPECS.get(pair, {"pip": 0.0001, "min_units": 1000, "precision": 0})
    return specs

def check_tp_sl():
    """V√©rifie les stops et take-profits."""
    active_trades = check_active_trades()
    for pair in active_trades:
        try:
            r = trades.TradeDetails(accountID=OANDA_ACCOUNT_ID, tradeID=pair)
            trade = client.request(r)
            current_price = get_current_price(pair)
            stop_loss = float(trade['stopLossOrder']['price'])
            take_profit = float(trade['takeProfitOrder']['price'])
            
            if current_price <= stop_loss:
                logger.info(f"üõë Stop Loss atteint pour {pair}")
                close_trade(pair)
            elif current_price >= take_profit:
                logger.info(f"üéØ Take Profit atteint pour {pair}")
                close_trade(pair)
        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification TP/SL {pair}: {str(e)}")

def close_trade(pair):
    """Ferme un trade."""
    try:
        r = trades.TradeClose(accountID=OANDA_ACCOUNT_ID, tradeID=pair)
        client.request(r)
        logger.info(f"‚úÖ Trade ferm√©: {pair}")
        active_trades.remove(pair)
    except Exception as e:
        logger.error(f"‚ùå Erreur fermeture trade {pair}: {str(e)}")

def main_loop():
    """Boucle principale du bot."""
    while True:
        try:
            now = datetime.utcnow()
            current_time = now.time()
            
            logger.info(f"‚è≥ Heure actuelle: {current_time}")
            
            # V√©rification des trades actifs
            active_trades = check_active_trades()
            logger.info(f"üìä Trades actifs: {len(active_trades)}")
            
            # Limite globale de 1 trade maximum
            if len(active_trades) >= 1:
                logger.info("‚ö†Ô∏è Limite de 1 trade atteinte - Attente...")
                time.sleep(60)
                continue
            
            # Session asiatique
            if ASIAN_SESSION_START <= current_time < ASIAN_SESSION_END:
                logger.info("üåè SESSION ASIATIQUE EN COURS")
                analyze_asian_session()
            elif LONDON_SESSION_START <= current_time <= NY_SESSION_END:
                logger.info("üèôÔ∏è SESSION LONDRES/NY EN COURS")
                for pair in PAIRS:
                    if pair not in active_trades:
                        analyze_pair(pair)
            else:
                logger.info("üåÜ HORS SESSION - Attente...")
            
            # V√©rification des stops et take-profits
            check_tp_sl()
            
            logger.info("‚è∞ Pause avant le prochain cycle...")
            time.sleep(60)
        
        except Exception as e:
            logger.error(f"üí• ERREUR GRAVE: {str(e)}", exc_info=True)
            time.sleep(300)

if __name__ == "__main__":
    try:
        logger.info("‚ú® D√âMARRAGE DU BOT DE TRADING ‚ú®")
        if SIMULATION_MODE:
            logger.info("üß™ MODE SIMULATION ACTIV√â")
        else:
            logger.info("üöÄ MODE TRADING R√âEL ACTIV√â")
        
        # Initialisation des donn√©es asiatiques
        for pair in PAIRS:
            if pair not in asian_ranges:
                logger.info(f"üåè R√©cup√©ration des donn√©es asiatiques historiques pour {pair}...")
                historical_range = fetch_historical_asian_range(pair)
                if historical_range:
                    asian_ranges[pair] = historical_range
        
        # Boucle principale
        main_loop()

    except Exception as e:
        logger.error(f"üí• ERREUR GRAVE: {str(e)}", exc_info=True)
        time.sleep(300)
